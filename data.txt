6/2
const logger = require("./logger");

logger.log("message");

asi se llamaria al objeto importado, para llamar a la funcion:
logger("message");
------------*-----------
const path = require("path");
var pathObj = path.parse(__filename);

console.log(pathObj);
------------*------------
const os = require("os");

var totalMemory = os.totalmem();
var freeMemory = os.freemem();

console.log(`Total memory: ${totalMemory}`);
console.log(`Free memory: ${freeMemory}`);

-------*-----------
const fs = require("fs");
const files = fs.readdirSync("./");
console.log(files);

fs.readdir("$", function (err, files) {
  if (err) console.log("Error", err);
  else console.log("Result", files);
});

----------*-*---------
appjs
const EventEmitter = require("events");

const Logger = require("./Logger");
const logger = new Logger();

// register a listener .addListener() does the same.
logger.on("messageLogged", (arg) => {
  console.log("Listener called", arg);
});

logger.log("message");


logger
const EventEmitter = require("events");

var url = "http://mylogger.io/log";

class Logger extends EventEmitter {
  log(message) {
    //send http request
    console.log(message);

    // raise an event
    this.emit("messageLogged", { id: 1, url: "http://" });
  }
}
//module.exports.log = log;
//esto exporta un objeto, para exportar la funcion se hace:
module.exports = Logger;

//what happens is that node does not execute the code directly, it wraps it inside of a inmediately involved funcion expression.
//a module wrapper function.
//here you can see that the require function is not global, but local in each module.
// we also have exports which is a shortcut to module.exports
// (function(exports, require, module, __filename, __dirname) {
//     var x =;

//if you want to add a function to module.exports object, you can either write
//module.exports.log = log;
//or
//exports.log = log;
//but you cant do it like we did earlier
//exports = log; THIS IS WRONG. cause this exports is a reference to module.exports and we cannot change that reference.
// })


// hasta clase 7 express - advancedtopics - index.js

const config = require("config");
const morgan = require("morgan");
const helmet = require("helmet");
const Joi = require("joi");
const logger = require("./logger");
const express = require("express");
const app = express();

console.log("Application Name: " + config.get("name"));
console.log("Mail host: " + config.get("mail.host"));
console.log("Mail password: " + config.get("mail.password"));

app.use(express.json());
app.use(express.urlencoded({ extended: true })); //middleware function - parses the incoming req with urlencoded payloads. to json format
// with extended true we can pass arrays and complex objects using the urlencoded format.
app.use(express.static("public")); //we can serve static content.
app.use(helmet());

if (app.get("env") === "development") {
  app.use(morgan("tiny"));
  console.log("Morgan enabled...");
}

app.use(logger);

const courses = [
  { id: 1, name: "course1" },
  { id: 2, name: "course2" },
  { id: 3, name: "course3" },
];

app.get("/", (req, res) => {
  res.send("Hello World");
});

app.get("/courses", (req, res) => {
  res.send(courses);
});

app.post("/courses", (req, res) => {
  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(error.details[0].message);

  const course = {
    id: courses.length + 1,
    name: req.body.name,
  };
  courses.push(course);
  res.send(course);
});

app.get("/courses/:id", (req, res) => {
  // prints parameters.
  // res.send(req.params.id);
  // prints optional parameters called query.
  // res.send(req.query);
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The course with the given ID was not found.");
  res.send(course);
});

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));

app.put("/courses/:id", (req, res) => {
  // look up the course
  // if not existing, return 404
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The course with the given ID was not found.");

  // validate
  // if invalid, return 400 - bad request

  // const result = validateCourse(req.body);
  const { error } = validateCourse(req.body);

  if (error) return res.status(400).send(error.details[0].message);

  // update course
  course.name = req.body.name;
  // return the updated course
  res.send(course);
});

function validateCourse(course) {
  const schema = {
    name: Joi.string().min(3).required(),
  };

  return Joi.validate(course, schema);
}

app.delete("/courses/:id", (req, res) => {
  // look up the course
  // not existing, return 404
  const course = courses.find((c) => c.id === parseInt(req.params.id));
  if (!course)
    return res.status(404).send("The course with the given ID was not found.");

  // delete
  const index = courses.indexOf(course);
  courses.splice(index, 1);

  // return the same course
  res.send(course);
});

-------------25/7debugging
const startupDebugger = require("debug")("app:startup");
const dbDebugger = require("debug")("app:db");
const morgan = require("morgan");
const express = require("express");
const app = express();

app.set("view engine", "pug");
app.set("views", "./views");

if (app.get("env") === "development") {
  app.use(morgan("tiny"));
  startupDebugger("Morgan enabled...");
}

// db work...
dbDebugger("Connected to the database...");

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));


